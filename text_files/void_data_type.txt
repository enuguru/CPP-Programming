
Why use a void data type in C++ ?

Imagine you have a Dog instance and a Cat instance, and you want to declare a variable that could point to either instance.

If you’re familiar with the venerable Dog/Cat example then you will already know they both inherit from the common base class, Animal.

Naturally you would declare the variable as type Animal*, because that is the type common to both Dog and Cat.

Now imagine you want to declare a pointer that could point to either a float or an int. (By the way, don’t do this.) What type should your variable be declared as?

You need a type that is common to both float* and int*. The answer is void*, which is a “pointer to anything.”

Another case where void is used is as a return type from a function or method. This is just a quirk of C/C++, which kind of expects that everything returns something, and so logically solves that problem by making “nothing” a thing that can be returned. Other languages did this better, I concede. Void as a return type means absolutely nothing is returned.

Void can also be used inside the parentheses when declaring a C function: int method(void). It means “this function takes exactly zero arguments.” When you write int method(), it means “this function takes an unspecified number of arguments and the types of the arguments are also unspecified.” C++, on the other hand, treats () and (void) functions as identical, meaning the method takes zero arguments.